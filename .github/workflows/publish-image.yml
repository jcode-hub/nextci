name: deploy

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - 'main'

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #     - name: Install modules
  #       run: yarn
  #     - name: eslint
  #       run: yarn lint
  # scan-snyk:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@master
  #     - name: Run Snyk to check for vulnerabilities
  #       uses: snyk/actions/node@master
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #     - name: Send Snyk vulnerabilities to web monitor
  #       uses: snyk/actions/node@master
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #       with:
  #         command: monitor
  # unit-tests:
  #   runs-on: ubuntu-latest
  #   needs: [lint, scan-snyk]
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #     - name: Install modules
  #       run: yarn
  #     - name: Run unit tests
  #       run: yarn test

  # e2e-test-linux:
  #   runs-on: ubuntu-latest
  #   container: mcr.microsoft.com/playwright
  #   needs: [lint, scan-snyk]
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #     - name: Install modules
  #       run: yarn
  #     - name: Build app
  #       run: yarn build
  #     - name: Start app
  #       run: yarn start </dev/null &>/dev/null &
  #     - name: Run end 2 end tests
  #       run: yarn test-e2e
  # e2e-test-mac:
  #   runs-on: macos-latest
  #   needs: [lint, scan-snyk]
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #     - name: Install modules
  #       run: yarn
  #     - name: Build app
  #       run: yarn build
  #     - name: Start app
  #       run: yarn start </dev/null &>/dev/null &
  #     - name: Run end 2 end tests
  #       run: yarn test-e2e
  #     - name: Configure AWS Credentials
  #       if: always()
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-central-1
  #     - name: Copy files to the s3 website content bucket
  #       if: always()
  #       run: aws s3 sync tests s3://end2end-debug

  # publish-docker-image:
  #   runs-on: ubuntu-latest
  #   needs: [unit-tests, e2e-test-mac, e2e-test-linux]
  #   permissions:
  #     contents: read
  #     packages: write
  #     # This is used to complete the identity challenge
  #     # with sigstore/fulcio when running outside of PRs.
  #     id-token: write

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     # Install the cosign tool except on PR
  #     # https://github.com/sigstore/cosign-installer
  #     - name: Install cosign
  #       if: github.event_name != 'pull_request'
  #       uses: sigstore/cosign-installer@1e95c1de343b5b0c23352d6417ee3e48d5bcd422
  #       with:
  #         cosign-release: 'v1.4.0'

  #     # Workaround: https://github.com/docker/build-push-action/issues/461
  #     - name: Setup Docker buildx
  #       uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

  #     # Login against a Docker registry except on PR
  #     # https://github.com/docker/login-action
  #     - name: Log into registry ${{ env.REGISTRY }}
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     # Extract metadata (tags, labels) for Docker
  #     # https://github.com/docker/metadata-action
  #     - name: Extract Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #         tags: |
  #           type=ref,event=pr
  #           type=ref,event=branch
  #           type=ref,enable=true,priority=600,prefix=,suffix=,event=tag
  #           type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

  #     # Build and push Docker image with Buildx (don't push on PR)
  #     # https://github.com/docker/build-push-action
  #     - name: Build and push Docker image
  #       id: build-and-push
  #       uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
  #       with:
  #         context: .
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}

  #     # Sign the resulting Docker image digest except on PRs.
  #     # This will only write to the public Rekor transparency log when the Docker
  #     # repository is public to avoid leaking data.  If you would like to publish
  #     # transparency data even for private images, pass --force to cosign below.
  #     # https://github.com/sigstore/cosign
  #     - name: Sign the published Docker image
  #       if: ${{ github.event_name != 'pull_request' }}
  #       env:
  #         COSIGN_EXPERIMENTAL: 'true'
  #       # This step uses the identity token to provision an ephemeral certificate
  #       # against the sigstore community Fulcio instance.
  #       run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}

  deploy:
    runs-on: 'ubuntu-latest'
    # needs: [publish-docker-image]
    steps:
      - uses: actions/checkout@v1
        with:
          repository: jcode-hub/helm-chart
          ref: main
          path: ~/
          submodules: true
      - name: check folder
        run: ls ${GITHUB_WORKSPACE}
      - name: 'Deploy'
        # uses: 'deliverybot/helm@v1'
        # uses: glopezep/helm@v1.7.1
        uses: elseu/sdu-helm-deploy-action@master
        with:
          release: helm-test
          helm: helm3
          repository: 'https://jcode-hub.github.io/helm-chart'
          repository_alias: 'mychart'
          namespace: 'hello-world'
          chart: 'mychart/helm-chart-test'
          token: '${{ github.token }}'
          value-files: '${GITHUB_WORKSPACE}/helm-chart-sources/helm-chart-test/values.yaml'
        env:
          KUBECONFIG_BASE64: '${{ secrets.KUBECONFIG }}'
